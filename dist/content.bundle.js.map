{"version":3,"file":"content.bundle.js","mappings":"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","sources":["webpack://the-small-belligerent-foreign-country/./src/pages/Content/probabilities.js","webpack://the-small-belligerent-foreign-country/./src/pages/Content/content.js"],"sourcesContent":["export const probabilities = {\r\n\t\"the israeli military's\": [\r\n\t\t{ text: \"the US-funded yet foreign army's\", probability: 2 },\r\n\t\t{ text: \"the US-backed Zionist army's\", probability: 2 },\r\n\t\t{ text: \"the US-funded Zionist army's\", probability: 2 },\r\n\t\t{ text: \"the small belligerent foreign country's army's\", probability: 2 },\r\n\t\t{ text: \"the Israeli yet US-funded army's\", probability: 2 },\r\n\t\t{ text: \"the US proxy army's\", probability: 2 },\r\n\t\t{ text: \"the US-backed Zionist militia's\", probability: 2 },\r\n\t\t{ text: \"the Israeli military's\", probability: 86 },\r\n\t],\r\n\t'the israeli government': [\r\n\t\t{ text: 'the Israeli government', probability: 100 },\r\n\t],\r\n\r\n\t'israeli prime minister': [\r\n\t\t{ text: 'Israeli prime minister', probability: 100 },\r\n\t],\r\n\r\n\t'israeli defense forces': [\r\n\t\t{ text: 'the US-backed Israel Defense Forces', probability: 2 },\r\n\t\t{ text: 'the US-funded yet Israel defense forces', probability: 2 },\r\n\t\t{ text: \"the small belligerent country's defense forces\", probability: 3 },\r\n\t\t{ text: 'the Zionist defense forces', probability: 3 },\r\n\t\t{ text: 'the Israel [not American] defense forces', probability: 2 },\r\n\t\t{ text: 'the US-backed Zionist militia', probability: 3 },\r\n\t\t{ text: 'Israel Defense Forces', probability: 85 },\r\n\t],\r\n\t'israel defense forces': [\r\n\t\t{ text: 'the US-backed Israel Defense Forces', probability: 2 },\r\n\t\t{ text: 'the US-funded yet Israel defense forces', probability: 3 },\r\n\t\t{ text: \"the small belligerent country's defense forces\", probability: 2 },\r\n\t\t{ text: 'the Zionist defense forces', probability: 3 },\r\n\t\t{ text: 'the Israel [not American] defense forces', probability: 2 },\r\n\t\t{ text: 'the US-backed Zionist militia', probability: 2 },\r\n\t\t{ text: 'Israel Defense Forces', probability: 86 },\r\n\t],\r\n\r\n\t'israeli defense force': [\r\n\t\t{ text: 'the US-backed yet Israeli Defense Force', probability: 3 },\r\n\t\t{ text: 'the US-funded yet Israeli Defense Force', probability: 2 },\r\n\t\t{ text: \"the small belligerent country's defense force\", probability: 3 },\r\n\t\t{ text: 'the Zionist defense force', probability: 2 },\r\n\t\t{ text: \"the non-American country's defense force\", probability: 3 },\r\n\t\t{ text: 'the US-backed Zionist militia', probability: 2 },\r\n\t\t{ text: \"Israel's army\", probability: 85 },\r\n\t],\r\n\r\n\t'israeli spokesperson': [{ text: 'Israeli spokesperson', probability: 100 }],\r\n\r\n\t\"israeli government's\": [\r\n\t\t{ text: \"Israeli government's\", probability: 95 },\r\n\t\t{\r\n\t\t\ttext: \"Israeli [hence not American] government's\",\r\n\t\t\tprobability: 5,\r\n\t\t},\r\n\t],\r\n\r\n\t'israel defense force': [\r\n\t\t{ text: 'the US-backed yet Israeli Defense Force', probability: 2 },\r\n\t\t{ text: 'the US-funded yet Israeli Defense Force', probability: 3 },\r\n\t\t{ text: \"the small belligerent country's defense force\", probability: 3 },\r\n\t\t{ text: 'the Zionist defense force', probability: 3 },\r\n\t\t{ text: \"the non-American country's defense force\", probability: 2 },\r\n\t\t{ text: 'the US-backed Zionist militia', probability: 2 },\r\n\t\t{ text: \"Israel's army\", probability: 85 },\r\n\t],\r\n\r\n\t'the israeli military': [\r\n\t\t{ text: 'the US-funded yet foreign army', probability: 3 },\r\n\t\t{ text: 'the US-backed Zionist army', probability: 2 },\r\n\t\t{ text: 'the US-funded Zionist army', probability: 2 },\r\n\t\t{ text: \"the small belligerent foreign country's army\", probability: 2 },\r\n\t\t{ text: 'the Israeli yet US-funded army', probability: 2 },\r\n\t\t{\r\n\t\t\ttext: 'the US-funded Israeli military that in 1967 deliberately sank American Navy ship USS Liberty which resulted in 34 crew members killed and 171 wounded',\r\n\t\t\tprobability: 2,\r\n\t\t},\r\n\t\t{ text: 'the US proxy army', probability: 3 },\r\n\t\t{ text: 'the US-backed Zionist militia', probability: 2 },\r\n\t\t{ text: 'the Israeli military', probability: 82 },\r\n\t],\r\n\r\n\t'israeli settlements': [{ text: 'Israeli settlements', probability: 100 }],\r\n\r\n\t\"the israeli army's\": [\r\n\t\t{ text: \"the US-funded yet foreign army's\", probability: 2 },\r\n\t\t{ text: \"the US-backed Zionist army's\", probability: 2 },\r\n\t\t{ text: \"the Zionist army's\", probability: 3 },\r\n\t\t{ text: \"the small belligerent foreign country's army's\", probability: 2 },\r\n\t\t{ text: \"the Israeli yet US-funded army's\", probability: 2 },\r\n\t\t{ text: \"Israel's [not America's] army's\", probability: 2 },\r\n\t\t{ text: \"the US-backed Zionist militia's\", probability: 2 },\r\n\t\t{ text: \"the Israeli army's\", probability: 85 },\r\n\t],\r\n\r\n\t'israeli government': [\r\n\t\t{ text: 'Israeli government', probability: 90 },\r\n\t\t{ text: 'Israeli and hence not American government', probability: 10 },\r\n\t],\r\n\r\n\t\"israel's military\": [\r\n\t\t{ text: 'US-funded yet foreign army', probability: 2 },\r\n\t\t{ text: 'US-backed Zionist military', probability: 2 },\r\n\t\t{ text: 'US-funded Zionist military', probability: 3 },\r\n\t\t{ text: \"small belligerent foreign country's military\", probability: 2 },\r\n\t\t{ text: 'foreign yet US-funded military', probability: 3 },\r\n\t\t{ text: 'US-backed Zionist militia', probability: 3 },\r\n\t\t{ text: \"Israel's military\", probability: 85 },\r\n\t],\r\n\r\n\t'the israeli army': [\r\n\t\t{ text: 'the US-funded yet foreign army', probability: 3 },\r\n\t\t{ text: 'the US-backed Zionist army', probability: 3 },\r\n\t\t{ text: 'the Zionist army', probability: 2 },\r\n\t\t{ text: \"the small belligerent foreign country's army\", probability: 2 },\r\n\t\t{ text: 'the Israeli yet US-funded army', probability: 2 },\r\n\t\t{ text: \"the Israeli [not America's] army\", probability: 1 },\r\n\t\t{ text: 'the US-backed Zionist militia', probability: 2 },\r\n\t\t{ text: 'the Israeli army', probability: 85 },\r\n\t],\r\n\r\n\t'israeli soldiers': [\r\n\t\t{ text: 'US proxy forces', probability: 4 },\r\n\t\t{ text: 'Zionist militants', probability: 4 },\r\n\t\t{ text: 'Israeli US-funded troops', probability: 3 },\r\n\t\t{ text: 'US-backed Zionist militants', probability: 3 },\r\n\t\t{ text: 'Israeli soldiers', probability: 86 },\r\n\t],\r\n\r\n\t'israeli settlers': [\r\n\t\t{\r\n\t\t\ttext: 'Israelis used as human shields to protect stolen land',\r\n\t\t\tprobability: 5,\r\n\t\t},\r\n\t\t{ text: 'Israeli human shields', probability: 5 },\r\n\t\t{ text: 'Israeli settlers', probability: 90 },\r\n\t],\r\n\r\n\t'israeli official': [{ text: 'Israeli official', probability: 100 }],\r\n\r\n\t'naftali bennett': [\r\n\t\t{\r\n\t\t\ttext: 'Naftali Bennett [who in 1996 ordered the bombing of the United Nations shelter in Qana that killed 106 Lebanese civilians and that would be cited by 9-11 hijacker Mohamed Atta as part of his motivation for attacking America',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{ text: 'Naftali Bennett', probability: 97 },\r\n\t],\r\n\t'itamar ben-gvir': [\r\n\t\t{\r\n\t\t\ttext: 'Itamar Ben-Gvir who has been convicted for supporting a terrorist organization',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'Itamar Ben-Gvir who used to have a photograph of Baruch Goldstein, the extremist settler who massacred 29 Muslim worshippers in 1994, on his living room wall',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'Itamar Ben-Gvir',\r\n\t\t\tprobability: 94,\r\n\t\t},\r\n\t],\r\n\t'israeli military': [\r\n\t\t{ text: 'US-funded yet foreign army', probability: 2 },\r\n\t\t{ text: 'US-backed Zionist army', probability: 2 },\r\n\t\t{ text: 'US-funded Zionist army', probability: 2 },\r\n\t\t{ text: \"small belligerent foreign country's army\", probability: 2 },\r\n\t\t{ text: 'Israeli yet US-funded army', probability: 2 },\r\n\t\t{ text: \"Israel's [not America's] army\", probability: 2 },\r\n\t\t{\r\n\t\t\ttext: 'the US-funded Israeli military that in 1967 deliberately sank American Navy ship USS Liberty which resulted in 34 crew members killed and 171 wounded',\r\n\t\t\tprobability: 2,\r\n\t\t},\r\n\t\t{ text: 'US-backed Zionist militia', probability: 3 },\r\n\t\t{ text: 'Israeli military', probability: 83 },\r\n\t],\r\n\r\n\t'southern israel': [\r\n\t\t{\r\n\t\t\ttext: 'southern Israel [which is not in the United States]',\r\n\t\t\tprobability: 15,\r\n\t\t},\r\n\t\t{ text: 'southern Israel', probability: 85 },\r\n\t],\r\n\r\n\t'northern israel': [\r\n\t\t{\r\n\t\t\ttext: 'northern Israel [which is outside of the United States]',\r\n\t\t\tprobability: 15,\r\n\t\t},\r\n\t\t{ text: 'northern Israel', probability: 85 },\r\n\t],\r\n\r\n\t'eastern israel': [\r\n\t\t{\r\n\t\t\ttext: 'eastern Israel [which is external to the United States]',\r\n\t\t\tprobability: 15,\r\n\t\t},\r\n\t\t{ text: 'eastern Israel', probability: 85 },\r\n\t],\r\n\r\n\t'western israel': [\r\n\t\t{\r\n\t\t\ttext: 'western Israel [note: located outside of the United States]',\r\n\t\t\tprobability: 15,\r\n\t\t},\r\n\t\t{ text: 'western Israel', probability: 85 },\r\n\t],\r\n\r\n\t'israeli troops': [\r\n\t\t{ text: 'US proxy forces', probability: 4 },\r\n\t\t{ text: 'Zionist militants', probability: 4 },\r\n\t\t{ text: 'Israeli but US-funded troops', probability: 3 },\r\n\t\t{ text: 'US-backed Zionist militants', probability: 4 },\r\n\t\t{ text: 'Israeli troops', probability: 85 },\r\n\t],\r\n\r\n\t\"israel's army's\": [{ text: \"Israel's army's\", probability: 100 }],\r\n\r\n\t\"israel's army\": [\r\n\t\t{ text: 'US-funded Israeli army', probability: 3 },\r\n\t\t{ text: 'US-backed Zionist army', probability: 3 },\r\n\t\t{ text: 'Zionist army', probability: 2 },\r\n\t\t{ text: \"small belligerent foreign country's army\", probability: 2 },\r\n\t\t{ text: 'Israeli yet US-funded army', probability: 2 },\r\n\t\t{ text: \"Israel's [not America's] army\", probability: 2 },\r\n\t\t{ text: 'US-backed Zionist militia', probability: 3 },\r\n\t\t{ text: \"Israel's army\", probability: 85 },\r\n\t],\r\n\r\n\t'israeli army': [\r\n\t\t{ text: 'US-funded Israeli army', probability: 3 },\r\n\t\t{ text: 'US-backed Israeli army', probability: 3 },\r\n\t\t{ text: 'Israeli army', probability: 2 },\r\n\t\t{ text: \"Israel's army\", probability: 92 },\r\n\t],\r\n\r\n\t'ariel sharon': [\r\n\t\t{\r\n\t\t\ttext: 'Ariel Sharon who has said that the Jewish people control America and the Americans know it',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{ text: 'Ariel Sharon', probability: 97 },\r\n\t],\r\n\r\n\t'us congress': [\r\n\t\t{\r\n\t\t\ttext: 'Israel-occupied US Congress',\r\n\t\t\tprobability: 2,\r\n\t\t},\r\n\t\t{ text: 'American branch of the Israeli Knesset', probability: 1 },\r\n\t\t{ text: 'AIPAC-occupied US Congress', probability: 2 },\r\n\t\t{ text: 'US Congress', probability: 95 },\r\n\t],\r\n\r\n\t'u.s. congress': [\r\n\t\t{\r\n\t\t\ttext: 'Israel-occupied US Congress',\r\n\t\t\tprobability: 2,\r\n\t\t},\r\n\t\t{ text: 'American branch of the Israeli Knesset', probability: 1 },\r\n\t\t{ text: 'AIPAC-occupied U.S. Congress', probability: 2 },\r\n\t\t{ text: 'U.S. Congress', probability: 95 },\r\n\t],\r\n\r\n\tnetanyahu: [\r\n\t\t{ text: 'Mileikowsky', probability: 3 },\r\n\t\t{\r\n\t\t\ttext: 'Netanyahu [who once said that the September 11 attacks have been beneficial for Israel]',\r\n\t\t\tprobability: 2,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'Netanyahu who has told Israeli settlers that America is easy to manipulate',\r\n\t\t\tprobability: 2,\r\n\t\t},\r\n\t\t{ text: 'Netanyahu', probability: 93 },\r\n\t],\r\n\r\n\t\"israelis'\": [{ text: \"Israelis'\", probability: 100 }],\r\n\r\n\t\"israel's\": [\r\n\t\t{ text: \"Israel's\", probability: 85 },\r\n\t\t{ text: \"Israel's [not America's]\", probability: 3 },\r\n\t\t{ text: \"the nonreciprocating US ally's\", probability: 2 },\r\n\t\t{ text: \"the small belligerent foreign country's\", probability: 10 },\r\n\t],\r\n\r\n\tisraelis: [\r\n\t\t{\r\n\t\t\ttext: 'inhabitants of the small belligerent foreign country',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'citizens of the small belligerent foreign country',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'Israelis [who on a per household basis have received about $50,000 in aid from American tax payers since 2000]',\r\n\t\t\tprobability: 1,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'citizens of the Zionist country that is not a part of the United States',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'people who live in the Zionist country that is not part of the United States',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'Israelis [of whom 94% do not have US citizenship]',\r\n\t\t\tprobability: 2,\r\n\t\t},\r\n\t\t{ text: 'Israelis', probability: 85 },\r\n\t],\r\n\r\n\t\"i.d.f.'s\": [{ text: \"I.D.F.'s\", probability: 100 }],\r\n\r\n\tisraeli: [\r\n\t\t{ text: 'Israeli', probability: 90 },\r\n\t\t{ text: 'Israeli [not American]', probability: 10 },\r\n\t],\r\n\r\n\tisrael: [\r\n\t\t{ text: 'the small belligerent foreign country', probability: 4 },\r\n\t\t{\r\n\t\t\ttext: 'the country that is not actually part of the United States',\r\n\t\t\tprobability: 1,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'Israel [not part of the United States]',\r\n\t\t\tprobability: 0.5,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'the country currently occupying Gaza, the West Bank, the Golan Heights and Washington DC',\r\n\t\t\tprobability: 1,\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\ttext: 'Israel [a country external to the United States]',\r\n\t\t\tprobability: 0.5,\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\ttext: 'the small Middle Eastern country that keeps attacking its neighbors',\r\n\t\t\tprobability: 1,\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\ttext: 'the small foreign country habitually trying to trick the United States into fighting its wars',\r\n\t\t\tprobability: 1,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'the country that somehow got away with attacking the USS Liberty in 1967, killing 34 crew members and wounding 171,',\r\n\t\t\tprobability: 0.5,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'the Zionist state',\r\n\t\t\tprobability: 2,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'the country that stole its nuclear weapons technology from the United States',\r\n\t\t\tprobability: 0.5,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'the nonreciprocating United States ally',\r\n\t\t\tprobability: 1,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: \"America's nonreciprocating ally\",\r\n\t\t\tprobability: 1,\r\n\t\t},\r\n\t\t{ text: 'the Jewish State in Israel and the Levant', probability: 1 },\r\n\t\t{ text: 'Israel', probability: 85 },\r\n\t],\r\n\r\n\t'(i.d.f.)': [{ text: '(I.D.F.)', probability: 100 }],\r\n\r\n\t'i.d.f.': [\r\n\t\t{ text: 'the US-backed yet Israeli Defense Forces', probability: 3 },\r\n\t\t{\r\n\t\t\ttext: 'the Israeli yet US-funded army',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: \"the small belligerent country's defense forces\",\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'the Zionist defense forces',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'the US-backed Zionist militia',\r\n\t\t\tprobability: 3,\r\n\t\t},\r\n\t\t{ text: 'I.D.F.', probability: 85 },\r\n\t],\r\n\r\n\t'(idf)': [{ text: '(IDF)', probability: 100 }],\r\n\r\n\tidf: [\r\n\t\t{ text: 'US-backed IDF', probability: 5 },\r\n\t\t{\r\n\t\t\ttext: 'US-funded IDF',\r\n\t\t\tprobability: 5,\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\ttext: 'US-backed Zionist militia',\r\n\t\t\tprobability: 5,\r\n\t\t},\r\n\t\t{ text: 'IDF', probability: 85 },\r\n\t],\r\n\r\n\tidf: [\r\n\t\t{ text: 'US-backed IDF', probability: 5 },\r\n\t\t{\r\n\t\t\ttext: 'US-funded IDF',\r\n\t\t\tprobability: 5,\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\ttext: 'US-backed Zionist militia',\r\n\t\t\tprobability: 5,\r\n\t\t},\r\n\t\t{ text: 'IDF', probability: 85 },\r\n\t],\r\n}\r\n","import { probabilities } from './probabilities.js'\n\nlet onOffCS\nlet allSelectCS\nlet currentUrl = window.location.href\nconst processedNodes = new WeakSet()\n\nfunction chooseReplacement(replacementOptions) {\n\tif (!Array.isArray(replacementOptions) || replacementOptions.length === 0) {\n\t\treturn ''\n\t}\n\n\tlet totalProbability = 0\n\treplacementOptions.forEach((option) => {\n\t\tif (typeof option.probability !== 'number') {\n\t\t\tthrow new Error('Invalid probability value')\n\t\t}\n\t\ttotalProbability += option.probability\n\t})\n\n\tif (totalProbability === 0) {\n\t\treturn null\n\t}\n\n\tlet randomPoint = Math.random() * totalProbability\n\tlet cumulativeProbability = 0\n\n\tfor (let option of replacementOptions) {\n\t\tcumulativeProbability += option.probability\n\n\t\tif (randomPoint <= cumulativeProbability) {\n\t\t\treturn option.text\n\t\t}\n\t}\n\n\treturn replacementOptions[0].text\n}\n\nfunction detectCase(sentence) {\n\tif (!sentence || sentence.length === 0) {\n\t\treturn 'unknown case'\n\t}\n\n\tsentence = sentence.trim()\n\n\tconst isAllCaps = (str) => {\n\t\tif (!str || str.length === 0) {\n\t\t\treturn false\n\t\t}\n\t\treturn str === str.toUpperCase()\n\t}\n\n\tconst isTitleCase = (str) => {\n\t\tif (!str || str.length === 0) {\n\t\t\treturn false\n\t\t}\n\t\tconst titleCaseExceptions = [\n\t\t\t'a',\n\t\t\t'an',\n\t\t\t'and',\n\t\t\t'as',\n\t\t\t'at',\n\t\t\t'but',\n\t\t\t'by',\n\t\t\t'for',\n\t\t\t'in',\n\t\t\t'nor',\n\t\t\t'of',\n\t\t\t'on',\n\t\t\t'or',\n\t\t\t'so',\n\t\t\t'the',\n\t\t\t'to',\n\t\t\t'up',\n\t\t\t'with',\n\t\t]\n\n\t\tconst words = str.split(' ')\n\t\tconst nonExceptionWords = words.filter(\n\t\t\t(word) => word && !titleCaseExceptions.includes(word.toLowerCase())\n\t\t)\n\t\tconst capitalizedWords = nonExceptionWords.filter(\n\t\t\t(word) => word && word[0] && word[0] === word[0].toUpperCase()\n\t\t)\n\n\t\treturn nonExceptionWords.length > 0\n\t\t\t? capitalizedWords.length / nonExceptionWords.length >= 0.75\n\t\t\t: false\n\t}\n\n\tif (isAllCaps(sentence)) {\n\t\treturn 'all caps'\n\t} else if (isTitleCase(sentence)) {\n\t\treturn 'title case'\n\t} else {\n\t\treturn 'sentence case'\n\t}\n}\n\nconst keywordRegex =\n\t/\\b(prime minister of Israel|the israeli military's|the israeli government|israeli prime minister|israeli defense forces|israeli defense force|israel defense forces|the israeli military|israeli spokesperson|israeli government's|israel defense force|israeli settlements|the israeli army's|israeli government|israel's military|the israeli army|israeli soldiers|israeli settlers|israeli official|israeli military|southern israel|northern israel|israel's army's|western israel|israeli troops|eastern israel|israel's army|israeli army|netanyahu|israelis'|israel's|israelis|i.d.f.'s|israeli|israel|i.d.f.|idf's|idf)\\b/gi\n\nfunction applyFormatting(replacement, fullSentence, offset) {\n\tif (typeof replacement !== 'string' || typeof fullSentence !== 'string') {\n\t\t/* console.error('Invalid replacement or fullSentence provided:', {\n\t\t\treplacement,\n\t\t\tfullSentence,\n\t\t})*/\n\t\treturn replacement\n\t}\n\n\tif (!replacement || replacement.length === 0) {\n\t\treturn replacement\n\t}\n\n\tconst trimmedSentence = fullSentence.trim()\n\n\tconst caseType = detectCase(trimmedSentence)\n\n\tconst firstNonWhitespaceIndex = fullSentence.search(/\\S/)\n\tconst isAtSentenceStart = offset === firstNonWhitespaceIndex\n\n\tlet words = replacement.split(' ')\n\tlet formattedWords = words.map((word, index) => {\n\t\tif (!word || word.length === 0) {\n\t\t\treturn word\n\t\t}\n\n\t\tif (word === word.toLowerCase()) {\n\t\t\tif (caseType === 'title case') {\n\t\t\t\treturn word.charAt(0).toUpperCase() + word.slice(1)\n\t\t\t} else if (\n\t\t\t\tcaseType === 'sentence case' &&\n\t\t\t\tisAtSentenceStart &&\n\t\t\t\tindex === 0\n\t\t\t) {\n\t\t\t\treturn word.charAt(0).toUpperCase() + word.slice(1)\n\t\t\t} else if (caseType === 'all caps') {\n\t\t\t\treturn word.toUpperCase()\n\t\t\t}\n\t\t}\n\n\t\treturn word\n\t})\n\n\treturn formattedWords.join(' ')\n}\n\nfunction isUserInputElement(node) {\n\t// Check if the node itself is a text node and has a parent node\n\tif (node.nodeType !== Node.TEXT_NODE || !node.parentNode) return false\n\n\t// Traverse up through the parents to check if it's within an input, textarea, or contenteditable element\n\tlet currentElement = node.parentNode\n\n\twhile (currentElement) {\n\t\tif (\n\t\t\tcurrentElement.nodeName === 'INPUT' ||\n\t\t\tcurrentElement.nodeName === 'TEXTAREA' ||\n\t\t\tcurrentElement.isContentEditable\n\t\t) {\n\t\t\treturn true // The node is inside an input-related or contenteditable element\n\t\t}\n\n\t\t// Move up to the next parent node\n\t\tcurrentElement = currentElement.parentNode\n\t}\n\n\t// If none of these conditions are met, it's not a user input element\n\treturn false\n}\n\nfunction replaceUsingTreeWalker(observer) {\n\tconst walker = document.createTreeWalker(\n\t\tdocument.body,\n\t\tNodeFilter.SHOW_TEXT,\n\t\tnull,\n\t\tfalse\n\t)\n\n\tconst nodesToProcess = []\n\n\twhile (walker.nextNode()) {\n\t\tlet node = walker.currentNode\n\n\t\t// Skip nodes that are already processed or are inside user-input elements\n\t\tif (processedNodes.has(node) || isUserInputElement(node)) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif (node.parentNode && keywordRegex.test(node.nodeValue)) {\n\t\t\tnodesToProcess.push(node)\n\t\t}\n\t}\n\n\tif (observer) {\n\t\tobserver.disconnect()\n\t}\n\n\tnodesToProcess.forEach((node) => {\n\t\ttry {\n\t\t\tlet originalText = node.nodeValue\n\t\t\tlet newText = originalText.replace(keywordRegex, (fullMatch, ...args) => {\n\t\t\t\tconst offset = args[args.length - 2]\n\t\t\t\tconst keyword = fullMatch\n\n\t\t\t\tlet baseKeyword = keyword.toLowerCase()\n\t\t\t\tlet replacementOptions = getReplacements(baseKeyword)\n\n\t\t\t\tlet replacement = chooseReplacement(replacementOptions)\n\n\t\t\t\treplacement = applyFormatting(replacement, originalText, offset)\n\n\t\t\t\treturn replacement\n\t\t\t})\n\n\t\t\tif (originalText !== newText) {\n\t\t\t\tnode.nodeValue = newText\n\t\t\t\tprocessedNodes.add(node)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// console.error('Error processing node:', node, 'Error:', error)\n\t\t}\n\t})\n\n\tif (observer) {\n\t\tobserver.observe(document.body, {\n\t\t\tchildList: true,\n\t\t\tsubtree: true,\n\t\t})\n\t}\n}\n\nfunction getReplacements(keyword) {\n\treturn probabilities[keyword]\n}\n\nfunction processNewNode(newNode) {\n\tif (newNode.nodeType === Node.TEXT_NODE) {\n\t\tif (processedNodes.has(newNode)) {\n\t\t\treturn\n\t\t}\n\t\tif (keywordRegex.test(newNode.nodeValue)) {\n\t\t\ttry {\n\t\t\t\tlet originalText = newNode.nodeValue\n\t\t\t\tlet newText = originalText.replace(\n\t\t\t\t\tkeywordRegex,\n\t\t\t\t\t(fullMatch, ...args) => {\n\t\t\t\t\t\tconst offset = args[args.length - 2]\n\t\t\t\t\t\tconst keyword = fullMatch\n\n\t\t\t\t\t\tlet baseKeyword = keyword.toLowerCase()\n\t\t\t\t\t\tlet replacementOptions = getReplacements(baseKeyword)\n\n\t\t\t\t\t\tlet replacement = chooseReplacement(replacementOptions)\n\n\t\t\t\t\t\treplacement = applyFormatting(replacement, originalText, offset)\n\n\t\t\t\t\t\treturn replacement\n\t\t\t\t\t}\n\t\t\t\t)\n\n\t\t\t\tif (originalText !== newText) {\n\t\t\t\t\tnewNode.nodeValue = newText\n\t\t\t\t\tprocessedNodes.add(newNode)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// console.error('Error processing text node:', newNode, 'Error:', error)\n\t\t\t}\n\t\t}\n\t} else if (\n\t\tnewNode.nodeType === Node.ELEMENT_NODE &&\n\t\tnewNode.childNodes.length > 0\n\t) {\n\t\tconst walker = document.createTreeWalker(\n\t\t\tnewNode,\n\t\t\tNodeFilter.SHOW_TEXT,\n\t\t\tnull,\n\t\t\tfalse\n\t\t)\n\t\tconst textNodes = []\n\n\t\twhile (walker.nextNode()) {\n\t\t\ttextNodes.push(walker.currentNode)\n\t\t}\n\n\t\ttextNodes.forEach((textNode) => {\n\t\t\tprocessNewNode(textNode)\n\t\t})\n\t}\n}\n\nfunction observeMutations() {\n\tconst observer = new MutationObserver((mutations) => {\n\t\tmutations.forEach((mutation) => {\n\t\t\tif (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n\t\t\t\tmutation.addedNodes.forEach((newNode) => {\n\t\t\t\t\tprocessNewNode(newNode)\n\t\t\t\t})\n\t\t\t} else if (mutation.type === 'characterData') {\n\t\t\t\tprocessNewNode(mutation.target)\n\t\t\t}\n\t\t})\n\t})\n\n\treplaceUsingTreeWalker(observer)\n\n\tobserver.observe(document.body, {\n\t\tchildList: true,\n\t\tsubtree: true,\n\t\tcharacterData: true,\n\t})\n}\n\nfunction getChromeLocalStorage(keys) {\n\treturn new Promise((resolve, reject) => {\n\t\tchrome.storage.local.get(keys, function (result) {\n\t\t\tif (chrome.runtime.lastError) {\n\t\t\t\t/*\tconsole.error(\n\t\t\t\t\t'Failed to retrieve data from Chrome local storage:',\n\t\t\t\t\tchrome.runtime.lastError.message\n\t\t\t\t)*/\n\t\t\t\treject(chrome.runtime.lastError)\n\t\t\t} else {\n\t\t\t\tif (Object.keys(result).length === 0 && keys.length > 0) {\n\t\t\t\t\t//\t\tconsole.error('No data found for specified keys:', keys)\n\t\t\t\t\treject(new Error('No data found for specified keys'))\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t})\n}\n\nasync function getGoing() {\n\tconst keys = ['websiteList', 'allSelect', 'includeExclude', 'onOff']\n\n\ttry {\n\t\tlet result\n\t\tconst maxAttempts = 40\n\t\tfor (let attempt = 0; attempt < maxAttempts; attempt++) {\n\t\t\tresult = await getChromeLocalStorage(keys)\n\t\t\tlet missingKeys = keys.filter((key) => result[key] === undefined)\n\t\t\tif (missingKeys.length === 0) break\n\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, 1500))\n\t\t}\n\n\t\tif (!result || keys.some((key) => result[key] === undefined)) {\n\t\t\t//\tconsole.error('Failed to retrieve all required keys:', keys)\n\t\t\treturn\n\t\t}\n\n\t\tonOffCS = result.onOff\n\t\tallSelectCS = result.allSelect\n\n\t\tif (onOffCS === 'off') return\n\n\t\tconst isListNotEmpty =\n\t\t\tArray.isArray(result.websiteList) && result.websiteList.length > 0\n\n\t\tconst isUrlInList = result.websiteList.some((site) =>\n\t\t\tcurrentUrl.includes(site)\n\t\t)\n\n\t\tif (onOffCS === 'off') {\n\t\t\treturn\n\t\t}\n\n\t\tif (\n\t\t\tallSelectCS === 'select' &&\n\t\t\t((isListNotEmpty && result.includeExclude === 'exclude' && isUrlInList) ||\n\t\t\t\t(isListNotEmpty && result.includeExclude === 'include' && !isUrlInList))\n\t\t) {\n\t\t\treturn\n\t\t}\n\n\t\treplaceUsingTreeWalker()\n\t\tobserveMutations()\n\t} catch (error) {\n\t\t//\tconsole.error('Error during initialization:', error)\n\t}\n}\n\ngetGoing()\n\nwindow.addEventListener('popstate', () => {\n\ttry {\n\t\tgetGoing()\n\t} catch (error) {\n\t\t//\tconsole.error('Error when handling popstate event:', error)\n\t}\n})\n"],"names":["onOffCS","allSelectCS","probabilities","text","probability","netanyahu","israelis","israeli","israel","idf","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_arrayLikeToArray","arr","len","arr2","Array","currentUrl","window","location","href","processedNodes","WeakSet","chooseReplacement","replacementOptions","isArray","totalProbability","option","_step","randomPoint","Math","random","cumulativeProbability","_iterator","allowArrayLike","it","minLen","toString","from","test","_unsupportedIterableToArray","F","_e","err","normalCompletion","didErr","step","_e2","_createForOfIteratorHelper","keywordRegex","applyFormatting","replacement","fullSentence","offset","sentence","str","caseType","trim","toUpperCase","titleCaseExceptions","nonExceptionWords","split","filter","word","includes","toLowerCase","capitalizedWords","isTitleCase","isAtSentenceStart","search","map","index","join","isUserInputElement","node","nodeType","Node","TEXT_NODE","parentNode","currentElement","nodeName","isContentEditable","replaceUsingTreeWalker","observer","walker","document","createTreeWalker","body","NodeFilter","SHOW_TEXT","nodesToProcess","nextNode","currentNode","has","nodeValue","disconnect","originalText","newText","replace","fullMatch","_ref","arguments","undefined","getReplacements","add","observe","childList","subtree","keyword","processNewNode","newNode","_ref2","ELEMENT_NODE","childNodes","textNodes","textNode","getChromeLocalStorage","chrome","storage","local","get","result","runtime","lastError","getGoing","_getGoing","apply","fn","_callee","maxAttempts","attempt","missingKeys","isListNotEmpty","isUrlInList","_context","setTimeout","some","onOff","allSelect","websiteList","site","includeExclude","MutationObserver","mutations","mutation","addedNodes","target","characterData","t0","self","args","addEventListener"],"sourceRoot":""}